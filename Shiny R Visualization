#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#


install.packages("shiny")
runExample()
sessionInfo()
update.packages(ask =FALSE)


# ############ Pantos Exercise 1


library(shiny)

ui <- fluidPage(
    # Application title
    titlePanel(title=h2("SAP Manual Slip Approval Status", align="center")),
    # Sidebar with a select input for number of bins
    sidebarLayout(
        fluidRow(
            column(4,
                   selectInput("ComCode",
                               "Company Code :",
                               c("All",
                                 unique(as.character(GG$ComCode))))),
            column(4,
                   selectInput("AppType",
                               "Approval Type :",
                               c("All",
                                 unique(as.character(GG$AppType))))),
        ),
        column(4,
               selectInput("DocType",
                           "Document Type :",
                           c("All",
                             unique(as.character(GG$DocType))))),
    ),# sidebarPanel
    # Show a plot of the generated distribution
    mainPanel(
        tabsetPanel(type="tab",
                    tabPanel("Data", DT::dataTableOutput("table")),
                    tabPanel("Plot_bar", plotOutput("gg_bar")),
                    tabPanel("Plot_rainbow", plotOutput("gg_rainbow")),
                    tabPanel("Plot_bubble", plotOutput("gg_bubble")),
                    tabPanel("Plot_map", plotOutput("gg_map")),
                    tabPanel("Plot_tree", plotOutput("tree_map")),
                    tabPanel("Summary", verbatimTextOutput("sum")),
                    tabPanel("Structure", verbatimTextOutput("str"))
                    
        ) # mainPanel
    ) # sidebarLayout
) # fluidPage

# Define server logic required to draw a histogram
server <- function(input, output, session) {
    # Filter data based on selections
    output$table <- DT::renderDataTable(DT::datatable({
        data <- GG
        if (input$ComCode != "All") {
            data <- data[data$ComCode == input$ComCode,]
        }
        if (input$AppType != "All") {
            data <- data[data$AppType == input$AppType,]
        }
        if (input$DocType != "All") {
            data <- data[data$DocType == input$DocType,]
        }
        data
    }))
    
    output$gg_bar <- renderPlot({
        data <- GG
        if (input$ComCode != "All") {
            data <- data[data$ComCode == input$ComCode,]
        }
        gg_bar
        
        if (input$AppType != "All") {
            data <- data[data$AppType == input$AppType,]
        }
        gg_bar
        
        if (input$DocType != "All") {
            data <- data[data$DocType == input$DocType,]
        }
        gg_bar
    })
    
    output$gg_rainbow <- renderPlot({
        data <- GG
        if (input$ComCode != "All") {
            data <- data[data$ComCode == input$ComCode,]
        }
        gg_rainbow
        
        if (input$AppType != "All") {
            data <- data[data$AppType == input$AppType,]
        }
        gg_rainbow
        
        if (input$DocType != "All") {
            data <- data[data$DocType == input$DocType,]
        }
        gg_rainbow
    })
    
    output$gg_bubble <- renderPlot({
        data <- GG
        if (input$ComCode != "All") {
            data <- data[data$ComCode == input$ComCode,]
        }
        gg_bubble
        
        if (input$AppType != "All") {
            data <- data[data$AppType == input$AppType,]
        }
        gg_bubble
        
        if (input$DocType != "All") {
            data <- data[data$DocType == input$DocType,]
        }
        gg_bubble
    })
    
    output$gg_map <- renderPlot({
        data <- GG
        if (input$ComCode != "All") {
            data <- data[data$ComCode == input$ComCode,]
        }
        gg_map
        
        if (input$AppType != "All") {
            data <- data[data$AppType == input$AppType,]
        }
        gg_map
        
        if (input$DocType != "All") {
            data <- data[data$DocType == input$DocType,]
        }
        gg_map
    })
    
    output$tree_map <- renderPlot({
        data <- GG
        if (input$ComCode != "All") {
            data <- data[data$ComCode == input$ComCode,]
        }
        tree_map
        
        if (input$AppType != "All") {
            data <- data[data$AppType == input$AppType,]
        }
        tree_map
        
        if (input$DocType != "All") {
            data <- data[data$DocType == input$DocType,]
        }
        tree_map
    })
    
    output$sum <- renderPrint({
        summary(GG)
    })
    
    output$str <- renderPrint({
        str(GG)
    })
    
}


# Run the application
shinyApp(ui = ui, server = server)


